/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package game.pikachu.view;

import java.awt.AlphaComposite;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseMotionAdapter;
import java.net.URL;
import java.util.List;
import javax.swing.ImageIcon;

/**
 * The MainPanelView class illustrates for main panel of game
 *
 * @author Khanh
 */
public class MainPanelView extends javax.swing.JPanel implements IMainPanelView {

	private int[][] array;
	private Point locationMouseMoved;
	private Point locationSquare;
	private Graphics2D g2d;
	private boolean drawLine = false;
	private boolean drawSquare = false;
	private boolean drawSuggest = false;
	private List<Point> listPoint;
	private List<Point> listPointSuggest;
	private static final float LINE_THICKNESS = 8.0f;
	private String path = "game/pikachu/icon/level1/";
	private int rows;
	private int cols;
	private int imageSize;
	private int padding;
	private int cellSize;
	private Point p;

	/**
	 * Creates new form MainPanelView
	 *
	 * @param array
	 *            an array (map game)
	 * @param rows
	 *            number rows of array
	 * @param cols
	 *            number column of array
	 * @param imageSize
	 *            size of image
	 * @param padding
	 *            padding of image
	 * @param p
	 *            the origin of the coordinate system
	 */
	public MainPanelView(int[][] array, int rows, int cols, int imageSize, int padding, Point p) {
		initComponents();
		this.setPreferredSize(new Dimension((16 + 2) * 58, (10 + 2) * 58));
		// this.setSize(new Dimension((cols + 2) * cellSize, (rows + 2) *
		// cellSize));
		// this.setMinimumSize(new Dimension((cols + 2) * cellSize, (rows + 2) *
		// cellSize));
		// this.setBackground(Color.LIGHT_GRAY);
		this.array = array;
		this.rows = rows;
		this.cols = cols;
		this.imageSize = imageSize;
		this.padding = padding;
		this.cellSize = imageSize + 2 * padding;
		this.p = p;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 400, Short.MAX_VALUE));
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 300, Short.MAX_VALUE));
	}// </editor-fold>//GEN-END:initComponents

	// Variables declaration - do not modify//GEN-BEGIN:variables
	// End of variables declaration//GEN-END:variables
	/**
	 * Get image from path of image
	 *
	 * @param url
	 *            path of image
	 * @return an Image object
	 */
	private Image getImage(String url) {
		ImageIcon icon;
		URL imgURL = getClass().getClassLoader().getResource(url);
		if (imgURL != null) {
			icon = new ImageIcon(imgURL);
			return icon.getImage();
		} else {
			System.err.println("Couldn't find file: " + url);
		}
		return null;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see javax.swing.JComponent#paintComponent(java.awt.Graphics)
	 */
	@Override
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		g2d = (Graphics2D) g;
		g2d.setColor(Color.BLUE);
		g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, .7f));
		g2d.drawImage(getImage("game/pikachu/icon/background.png"), 0, 0, this.getWidth(), this.getHeight(), null);
		g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1.0f));
		for (int row = 0; row < rows; ++row) {
			for (int col = 0; col < cols; ++col) {
				if (array[row][col] != 0) {
					Image img = this.getImage(path + array[row][col] + ".png");
					if (img != null) {
						g2d.drawImage(img, p.x + cellSize + imageSize * col + (2 * col + 1) * padding,
								p.y + cellSize + imageSize * row + (2 * row + 1) * padding, imageSize, imageSize, null);
					}
				}
			}
		}

		if (locationMouseMoved != null && array[locationMouseMoved.x][locationMouseMoved.y] != 0) {
			drawMouseMoved();
		}
		if (drawLine) {
			drawLine();
		}
		if (drawSquare) {
			drawSquare();
		}
		if (drawSuggest) {
			drawSuggest();
		}

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * game.pikachu.view.IMainPanelView#addMouseListenerToMainPanel(java.awt.
	 * event.MouseAdapter)
	 */
	@Override
	public void addMouseListenerToMainPanel(MouseAdapter listener) {
		// TODO Auto-generated method stub
		this.addMouseListener(listener);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see game.pikachu.view.IMainPanelView#getArray()
	 */
	@Override
	public int[][] getArray() {
		return array;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see game.pikachu.view.IMainPanelView#setArray(int[][])
	 */
	@Override
	public void setArray(int[][] array) {
		// TODO Auto-generated method stub
		this.array = array;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see game.pikachu.view.IMainPanelView#update()
	 */
	@Override
	public void update() {
		// TODO Auto-generated method stub
		repaint();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * game.pikachu.view.IMainPanelView#addMouseMotionListenerToMainPanel(java.
	 * awt.event.MouseMotionAdapter)
	 */
	@Override
	public void addMouseMotionListenerToMainPanel(MouseMotionAdapter listener) {
		// TODO Auto-generated method stub
		this.addMouseMotionListener(listener);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * game.pikachu.view.IMainPanelView#setLocationMouseMoved(java.awt.Point)
	 */
	@Override
	public void setLocationMouseMoved(Point p) {
		// TODO Auto-generated method stub
		this.locationMouseMoved = p;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see game.pikachu.view.IMainPanelView#setLocationSquare(java.awt.Point)
	 */
	@Override
	public void setLocationSquare(Point p) {
		this.locationSquare = p;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see game.pikachu.view.IMainPanelView#setDrawLine(boolean)
	 */
	@Override
	public void setDrawLine(boolean b) {
		drawLine = b;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see game.pikachu.view.IMainPanelView#setListPoint(java.util.List)
	 */
	@Override
	public void setListPoint(List<Point> listPoint) {
		// TODO Auto-generated method stub
		this.listPoint = listPoint;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see game.pikachu.view.IMainPanelView#setListPointSuggest(java.util.List)
	 */
	@Override
	public void setListPointSuggest(List<Point> listPointSuggest) {
		this.listPointSuggest = listPointSuggest;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see game.pikachu.view.IMainPanelView#setDrawSquare(boolean)
	 */
	@Override
	public void setDrawSquare(boolean b) {
		this.drawSquare = b;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see game.pikachu.view.IMainPanelView#setDrawSuggest(boolean)
	 */
	@Override
	public void setDrawSuggest(boolean b) {
		this.drawSuggest = b;
	}

	/**
	 * Draw line
	 */
	private void drawLine() {
		g2d.setColor(Color.RED);
		g2d.setStroke(new BasicStroke(LINE_THICKNESS));
		g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1.0f));
		int size = listPoint.size();
		for (int i = 1; i < size; i++) {
			g2d.drawLine(listPoint.get(i - 1).x, listPoint.get(i - 1).y, listPoint.get(i).x, listPoint.get(i).y);
		}
	}

	/**
	 * Draw when mouse moved
	 */
	public void drawMouseMoved() {

		g2d.setColor(Color.BLUE);
		g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, .5f));
		g2d.setStroke(new BasicStroke(4.0f));
		g2d.drawRect(p.x + (locationMouseMoved.y + 1) * cellSize + padding + 2,
				p.y + (locationMouseMoved.x + 1) * cellSize + padding + 2, imageSize - 4, imageSize - 4);
		g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, .2f));
		g2d.fillRect(p.x + (locationMouseMoved.y + 1) * cellSize + padding,
				p.y + (locationMouseMoved.x + 1) * cellSize + padding, imageSize, imageSize);
	}

	/**
	 * Draw square when mouse pressed
	 */
	private void drawSquare() {
		g2d.setColor(Color.BLUE);
		g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1.0f));
		g2d.setStroke(new BasicStroke(4.0f));
		g2d.drawRect(p.x + (locationSquare.y + 1) * cellSize + padding + 2,
				p.y + (locationSquare.x + 1) * cellSize + padding + 2, imageSize - 4, imageSize - 4);
		g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, .3f));
		g2d.fillRect(p.x + (locationSquare.y + 1) * cellSize + padding,
				p.y + (locationSquare.x + 1) * cellSize + padding, imageSize, imageSize);
	}

	/**
	 * Draw line suggest
	 */
	private void drawSuggest() {
		g2d.setColor(Color.ORANGE);
		g2d.setStroke(new BasicStroke(LINE_THICKNESS));
		g2d.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 1.0f));
		int size = listPointSuggest.size();
		for (int i = 1; i < size; i++) {
			g2d.drawLine(listPointSuggest.get(i - 1).x, listPointSuggest.get(i - 1).y, listPointSuggest.get(i).x,
					listPointSuggest.get(i).y);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see game.pikachu.view.IMainPanelView#setPath(java.lang.String)
	 */
	@Override
	public void setPath(String str) {
		this.path = str;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see game.pikachu.view.IMainPanelView#getPath()
	 */
	@Override
	public String getPath() {
		return path;
	}

}
